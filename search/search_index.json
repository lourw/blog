{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my Blog","text":""},{"location":"#about-me","title":"About me","text":"<p>I am a recent graduate of a Combined Major in Business and Computer Science from the University of British Columbia in Vancouver, Canada. </p> <p>My technical interests lie in the intersection of cloud and systems design. I love complex abstract problems, but am also naturally curious about the internal workings of specific tools. </p>"},{"location":"#about-this-site","title":"About this site","text":"<p>As a computer science student, I've come to realize that there is too much information out there. It is way too easy to lose track of all the different tools I've used and learnings I've accumulated. My solution is therefore to create a blog that I can use a cental repository of knowledge. I want to use this blog to record new technologies and projects that I work with.</p> <p>I've tried to do blogging in the past, but always lost interest when I set the blog up. I used to hand-code my 'blogs' using programs like Gatsby and Jekyll. However, I quickly realized that I was wasting time setting up these sites instead of actually writing content!   </p> <p>This current site is my attempt at using a new set of tools to create a blog that will actually be updated frequently with new learnings. I'm using mkdocs-material to abstract out the creation of the underlying site itself and focusing on the quality of writing in my markdown. </p>"},{"location":"learning/containers/","title":"Containers","text":""},{"location":"learning/containers/#overview","title":"Overview","text":"<p>I love using this diagram to illustrate the difference between containers and virtual machines. </p> Virtual MachineContainer <pre><code>graph BT\n    A[Infrastructure] --&gt; Z\n    Z[Host OS] --&gt; B\n    B[Hypervisor] --&gt; C\n    subgraph C[VM1]\n        direction BT    \n        D[Guest OS] --&gt; E[App]\n    end\n    B --&gt; F\n    subgraph F[VM2]\n        direction BT    \n        G[Guest OS] --&gt; H[App]\n    end\n    B --&gt; I\n    subgraph I[VM3]\n        direction BT    \n        J[Guest OS] --&gt; K[App]\n    end</code></pre> <p>In order to create a virtual machine, you need to allocate enough CPU, memory and storage for each of the VM operating systems. Setting up these operating systems can also be a slow process. If your app is lightweight, more resources may be going into running the VM rather than to supporting your application. </p> <p>NOTE: Hypervisor is just the software application that creates virtual machines. </p> <pre><code>graph BT\n    A[Infrastructure] --&gt; B\n    B[Host OS] --&gt; C\n    C[Container Engine] --&gt; D\n    subgraph D[Container 1]\n        E[App]\n    end\n    C --&gt; F\n    subgraph F[Container 2]\n        G[App]\n    end\n    C --&gt; H\n    subgraph H[Container 3]\n        I[App]\n    end</code></pre> <p>We use a container engine (Docker, Podman) to create multiple containers for our apps. All of these apps are isolated from each other in a similar fashion to the VM example. However, the container engine running the containers utilizes the underlying host's operating system and infrastructure. You use less resources creating the containers and therefore more of your compute resources can go to running your apps. </p> <p>NOTE: Because you are not mocking the underlying OS of the machine, differing architectures may make containers incompatible with certain systems. You cannot run an x86 architecture container on ARM computers for example. </p>"},{"location":"learning/containers/#terminology","title":"Terminology","text":"<code>images</code> A \"recipe\" for creating a container   <code>container</code> Lightweight and replicatable environments for code <code>Docker</code> A service on your computer that enables you to create a run  called containers <code>Dockerfile</code> A file with steps for creating a container image"},{"location":"learning/containers/#what-are-containers-used-for","title":"What are containers used for?","text":"<ul> <li>Code Development     With a team of developers all using different devices, it can be time consuming setting up new environments on everyone's machines. Why not have an environment built into a container and allow developers to develope code right into it?</li> <li>Deployment     Rather than setting up a VM with all the dependencies and manually configuring a deployment for a service, just run the service from a container. Not only is it faster to run a pre-configured environment on a container, but if something goes wrong, just swap your service out with another container. </li> </ul>"},{"location":"learning/containers/#using-docker","title":"Using Docker","text":""},{"location":"learning/containers/#command-line","title":"Command-line","text":"<ol> <li> <p>Build an image using your Dockerfile. This assumes two things</p> <ol> <li>You have a <code>Dockerfile</code> in the root directory of your local development folder</li> <li>You are calling the following command in the directory your Dockerfile is located in</li> </ol> <pre><code>docker build -t &lt;image-name&gt; .\n</code></pre> </li> <li> <p>Create a container using your new image</p> <pre><code>docker run -it -p 8080:8080 &lt;image-name&gt;\n</code></pre> <p>NOTE: <code>-it</code> creates an interactive terminal session you can use to interact with your container. </p> </li> </ol>"},{"location":"learning/containers/#dockerfile","title":"Dockerfile","text":"<p>When create your Dockerfile, here are the main steps involved:  </p> <ol> <li> <p>Use a base image     You can find a lot of free images online at DockerHub</p> <pre><code>FROM ubuntu:latest\n</code></pre> </li> <li> <p>Set working directory     Set the directory within the container that you will be working from</p> <pre><code>WORKDIR /app\n</code></pre> </li> <li> <p>Copy source code      Copy your code from your local directory to your Dockerfile. Remember that your Dockerfile sits in the root folder of your working directory, so you often can just copy everything from your working directory into the new image. </p> <pre><code>COPY . .\n</code></pre> </li> <li> <p>Other commands     Whatever other commands you wish to do within your container         <pre><code># run commands\nRUN go mod download &amp;&amp; go mod verify # set environment variables in your container\nENV GIN_MODE=release\n</code></pre></p> </li> </ol>"},{"location":"learning/containers/#multi-stage-builds","title":"Multi-Stage Builds","text":"<p>Sometimes you may want to break down your project into multiple stages to better organize and simplify the process. </p>"},{"location":"learning/containers/#example","title":"Example","text":"<p>You have web-app that contains a backend and frontend. Your backend is written in Golang and your frontend uses React. You need to do the following:</p> <ol> <li>Build your backend server</li> <li>Build your frontend client</li> <li>Combine both final assets into a container that will deploy both the frontend and backend</li> </ol> <p>Assume the following file structure</p> Sample Project<pre><code>.\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 go.mod\n\u2502   \u2514\u2500\u2500 src/\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 src/\n\u2514\u2500\u2500 Dockerfile\n</code></pre>"},{"location":"learning/containers/#sample-dockerfile","title":"Sample Dockerfile","text":"Dockerfile<pre><code>FROM node:18 as frontend-build\n# Set up npm dependencies\nWORKDIR /app\nCOPY ./frontend/package*.json ./\nRUN npm install\n\n# Build assets for frontend\nCOPY ./frontend/. ./\nRUN npm run build\n\nFROM golang as backend-build\n# Setup golang dependencies\nWORKDIR /app/backend\nCOPY ./backend/go* ./\nRUN go mod download &amp;&amp; go mod verify\n\n# Build deployment binary\nCOPY ./backend/. ./\nRUN CGO_ENABLED=0 go build -o bin/schedulii ./src/main.go\n\nFROM alpine:latest\n# Configure for golang compatibility\nRUN apk add gcompat &amp;&amp; apk add --update curl\n\n# Ensure server runs in production mode\nENV GIN_MODE=release\n\n# Grab binaries and build assets from build stages\nWORKDIR /app\nCOPY --from=frontend-build /app/build ./frontend/build\nCOPY --from=backend-build /app/backend/bin/. ./backend/bin/.\n\n# Run application\nEXPOSE 8080\nWORKDIR /app/backend/bin\nCMD [\"./app\"]\n</code></pre>"},{"location":"learning/containers/#references","title":"References","text":"<ul> <li>Diagram Source</li> </ul>"},{"location":"learning/links_to_other_readings/","title":"Links to Cool Readings","text":""},{"location":"learning/links_to_other_readings/#big-data","title":"Big Data","text":"<ul> <li>Big Data is Dead</li> </ul>"},{"location":"learning/git/git/","title":"Version Control with Git","text":"<p>This is used as a reference sheet for people starting out in CS and want a crash course on Git. </p>"},{"location":"learning/git/git/#the-problem","title":"The Problem","text":"<p>Let's first address why we use git. Think about the following situation:</p> <ol> <li>You just created a new project to manage. There</li> <li>Your friend wants to collaborate on coe i</li> </ol>"},{"location":"learning/git/git/#intro-to-version-control","title":"Intro to Version Control","text":""},{"location":"learning/git/git/#branching","title":"Branching","text":""},{"location":"learning/git/git/#merging","title":"Merging","text":""},{"location":"learning/git/git/#rebasing","title":"Rebasing","text":""},{"location":"learning/git/git/#rebasing-when-your-local-branch-is-out-of-date","title":"Rebasing when your local branch is out of date","text":"<pre><code>gitGraph\n    commit\n</code></pre>"},{"location":"learning/git/git/#other-git-tools","title":"Other Git Tools","text":""},{"location":"learning/git/git/#remote-version-control","title":"Remote Version Control","text":"<p>Now that you are able to control the versioning of your project, how do you collaborate on it with other people? Git only managed the versioning on your local machine so we need to bring in a new tool: Github.</p> <p>Github allows you to create a repository that exists out in the internet called the <code>remote repository</code>. You can store your own code and its different versions on github and allow other people to access them.</p>"},{"location":"learning/git/git/#setting-up-your-remote-repo","title":"Setting up your Remote Repo","text":"<p>On your local machine: <pre><code>git remote add origin &lt;remote-url&gt;\n</code></pre> - create a git repository by creating a folder and running <code>git init</code>. This will generate a <code>.git</code> folder (any folder with a <code>.git</code> folder in it is consiered a repository) - <code>git remote add</code> tells github that you want to link your local repository with a remote one - <code>origin &lt;remote-urL&gt;</code> is the alias for your remote repository and the link associated with it. In the future when you want to reference the remote, use <code>origin</code>. Technically you can choose any other word as this alias, but <code>origin</code> is the convention. </p> <p>You are now ready to track changes in your repository!</p>"},{"location":"learning/git/git/#pushing","title":"Pushing","text":""},{"location":"learning/git/git/#pulling","title":"Pulling","text":""},{"location":"learning/git/git/#collaborating-on-remote-codebases","title":"Collaborating on Remote Codebases","text":""},{"location":"learning/git/git/#sample-git-workflow","title":"Sample Git Workflow","text":""},{"location":"learning/git/hooks/","title":"Git Hooks","text":"<p>You can add automation to your git workflow. </p> <ol> <li>Add a file into the ./git/hooks directory of your repo</li> <li>Add a new file with a script corresonding for your hook. The file name should be one of:<ul> <li>pre-commit</li> <li>pre-merge</li> <li>pre-push</li> <li>pre-rebase</li> <li>pre-applypatch</li> <li>pre-receive</li> <li>...there are more as well</li> </ul> </li> <li>Insert your custom script into the new file</li> <li>Set the file as executable with      <pre><code>chmod +x pre-commit\n</code></pre></li> </ol>"},{"location":"learning/git/hooks/#references","title":"References","text":"<ul> <li>Atlassian Docs</li> </ul>"},{"location":"learning/rust/ownership/","title":"Ownership","text":"<p>With C you are able to set pointers and reference them at will. The caveat being that C will not guarantee if your pointer will be referencing a valid memory address. Given the user has so much control over memory addresses, it also allows for bugs to creep into code. Pointers don't keep track of the validity of underlying values and it's totally possible to accidentally set a pointer pointing to null. </p> <p>Rust circumvents the pointer issue by using its own system of memory management. A reference in rust is similar to C in that it acts like a pointer to data behind a memory address. However, it is guaranteed that the reference will point to valid data. </p>"},{"location":"learning/rust/ownership/#overview","title":"Overview","text":""},{"location":"learning/rust/ownership/#rules-of-rust-ownership","title":"Rules of Rust Ownership","text":"<ol> <li>Each value has a variable that is its owner</li> <li>There can only be one owner at a time</li> <li>When an owner is out of scope, the value is dropped</li> </ol>"},{"location":"learning/rust/ownership/#primitives","title":"Primitives","text":"<p>In the case of primitives like <code>u32</code>, <code>i32</code>, or <code>bool</code> they implement the <code>Copy</code> trait. This allows rust to create a copy of the value since it's all stored on the stack. </p> <pre><code>fn main() {\nlet x: u32 = 10;\nlet y = x;\n\nprintln!(x); // valid print of x's value\n}\n</code></pre> <p><code>y</code> is a deep copy of <code>x</code> so there are no ownership issues here</p> <pre><code>graph LR\n    A[x] -- original value --&gt; C[stack]\n    B[y] -- copy of A --&gt; D[stack]</code></pre>"},{"location":"learning/rust/ownership/#moving","title":"Moving","text":"<p>When you have multiple variables reference values on the heap, rust will complain. </p> <p>Given the following example, </p> <p><pre><code>fn main() {\nlet x: String = String::from(\"Hello World\");\nlet y = x;\n\nprintln!(x);\n}\n</code></pre> You will get a move error on compile. <pre><code>graph LR\n    A[x] -- Invalidated by rust --&gt; C[heap]; \n    B[y] -- New owner--&gt; C</code></pre></p> <p>Unlike C where two pointers to the same heap location may conflict, by enforcing ownership of only one variable at a time, rust guarantees you won't run into situations where one pointer modifies an underlying value without the other one knowing. </p>"},{"location":"learning/rust/ownership/#functions","title":"Functions","text":"<p>Passing variables into a function is similar to assigning values to new variables.</p>"},{"location":"learning/rust/ownership/#what-can-go-wrong","title":"What can go wrong?","text":"<p><pre><code>fn ownership_func(value: String) {\n...\n}\n\nfn main() {\nlet x: String = String::from(\"Hello World\");\nownership_func(x);\nprintln!(x);\n}\n</code></pre> When we call <code>ownership_func</code> with <code>x</code>, we move the ownership of <code>x</code> into the function. However, when the function completes, the value of x gets dropped. There is now a dangling reference in main to a value <code>x</code> that was already dropped.</p>"},{"location":"learning/rust/ownership/#returning-ownership","title":"Returning ownership","text":"<p>You can have a function return ownership of a value back to the original variable to bypass the move compiler error.  <pre><code>fn ownership_func(value: String) -&gt; String {\n...\nvalue\n}\n\nfn main() {\nlet x: String = String::from(\"Hello World\");\nx = ownership_func(x);\nprintln!(x);\n}\n</code></pre></p>"},{"location":"learning/rust/ownership/#references-and-borrowing","title":"References and Borrowing","text":"<p>You can use the idea of references and borrowing to simplify process of transferring ownership repeatedly between values and functions. </p> <code>reference</code> a pointer (immutable) <code>borrowing</code> passing in a reference without transferring ownership. You cannot modify a value that is borrowed.  <pre><code>fn borrower(value: &amp;String) -&gt; u32 {\nvalue.len();\n}  fn main() {\nlet x: String = String::from(\"Hello World\");\nlet size: u32 = borrower(x);\nprintln(\"{}, {}\", x, size);\n}\n</code></pre> <p><code>value</code> is a pointer that refers to the value of x. </p> <pre><code>graph LR\n    A[value] -- pointer --&gt; B[x] -- owns --&gt; C[\"Hello World\"]</code></pre>"},{"location":"learning/rust/ownership/#mutability","title":"Mutability","text":"<p>What if you want to modify a value without transferring ownership?</p> <p>You can use mutable references!</p> <pre><code>fn mutate(value: &amp;mut String) {\nvalue.push_str(\"!\");\n}\n\nfn main() {\nlet mut x: String = String::from(\"Hello World\");\nmutate(x);\nprintln!(x); // prints \"Hello World!\"\n}\n</code></pre>"},{"location":"learning/rust/ownership/#mutability-restrictions","title":"Mutability Restrictions","text":"<ol> <li>For a given scope, there can only be one mutable reference</li> <li>If an immutable reference already exists in scope, you cannot have a mutable reference</li> </ol>"},{"location":"learning/rust/ownership/#reference-syntax","title":"Reference Syntax","text":"<p> ... section in progress</p> <p>Similar to C, rust also uses the same symbols for reference/pointer manipulation. </p> RustC <pre><code>fn main() {\nlet x: u32 = 10; # initialize a variable with value 10\n\nlet y = x; # y creates a full copy of x since the u32 type has the Copy trait\n}\n</code></pre> <pre><code>int main(void) {\nint x = 10; # initialize a variable with value 10\n\nint* y = &amp;x # initialize a pointer that references the address of a value\n\n*x = 20; # dereference pointer and set new value at pointer location\n}\n</code></pre>"},{"location":"learning/rust/ownership/#references","title":"References","text":"<ul> <li>Rust docs</li> <li>Let's Get Rusty Youtube Video - Ownership</li> </ul>"},{"location":"learning/rust/strings/","title":"Strings","text":"<p>There are two ways to represent strings in rust:</p>"},{"location":"learning/rust/strings/#string-literal","title":"String literal","text":"<pre><code>let x: &amp;str = \"Hello World\";\n</code></pre> <ul> <li>stored in binary</li> <li>stored in the stack</li> <li>fixed in size</li> </ul>"},{"location":"learning/rust/strings/#string-type","title":"String Type","text":"<pre><code>let x:String = String::from(\"Hello World\");\n</code></pre> <ul> <li>dynamic in type</li> <li>stored on the heap</li> </ul>"},{"location":"learning/rust/strings/#clone","title":"Clone","text":"<p>To make a deep copy of a <code>String</code>, you need to use the <code>.clone()</code> method:</p> <pre><code>let x: String = String::from(\"Hello World\");\nlet y: String = x.clone();\n</code></pre>"},{"location":"personal/to-do_projects/","title":"To-do Projects","text":"<p>For the projects that pop into my head, but I never have time to get around to:</p> <ul> <li> webgrep     a CLI that allows you to search for a piece of text within  URL. <ul> <li>if pattern exists within the HTML of a site, return the surrounding HTML element or document object path. </li> <li>write the tool in rust</li> <li>flags<ul> <li>r: recursive search through all a tags that belong to the same host</li> <li>b: return true or false depending if the given pattern is in the webpage</li> <li>t: set the timeout before page scans (to avoid ddossing) </li> </ul> </li> </ul> </li> </ul>"},{"location":"personal/configs/shell/shell_config/","title":"Shell Configuration","text":"<p>This is my default setup whenever I initiate a new shell on a computer</p>"},{"location":"personal/configs/shell/shell_config/#prompt","title":"Prompt","text":"<p>You can change how your terminal prompt looks. </p> <pre><code>lourw:02/08/23 ~/Projects/development [main] ~ echo \"Hello\"\n</code></pre> <p>To achieve this, put the following in your .zshrc/.bashrc</p> ZshBash <pre><code>function parse_git_branch() {\ngit branch 2&gt; /dev/null | sed -n -e 's/^\\* \\(.*\\)/[\\1]/p'\n}\nsetopt PROMPT_SUBST\nexport PROMPT='%F{white}%n:%W%f%F{green} %~ $%f%F{cyan}(parse_git_branch)%f%F{green}'$'\\n''~%f '\n</code></pre> Sourced from References<pre><code>function parse_git_branch() {\ngit branch 2&gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/(\\1)/'\n}\nexport PS1=\"\\u@\\h \\[\\e[32m\\]\\w \\[\\e[91m\\]\\$(parse_git_branch)\\[\\e[00m\\]$ \"\n</code></pre>"},{"location":"personal/configs/shell/shell_config/#references","title":"References","text":"<ul> <li>Sample Bash Prompt</li> </ul>"},{"location":"personal/configs/vim/vim_config/","title":"Vim Configuration","text":""},{"location":"personal/configs/vim/vim_config/#plugin-manager","title":"Plugin Manager","text":"<p>I like to use vim plug .vimrc<pre><code>call plug#begin()\n\nPlug 'scrooloose/nerdtree'\n\ncall plug#end()\n</code></pre></p>"},{"location":"personal/configs/vim/vim_config/#themeing","title":"Themeing","text":"<pre><code>colorscheme slate\n</code></pre>"},{"location":"personal/configs/vim/vim_config/#use-configurations","title":"Use Configurations","text":"<pre><code>set mouse=a\nnnoremap &lt;LeftMouse&gt; &lt;LeftMouse&gt;a\nsyntax on\n</code></pre>"},{"location":"personal/configs/vim/vim_config/#typing-experience","title":"Typing Experience","text":"<pre><code>set cursorline\nset cursorcolumn\n</code></pre>"},{"location":"personal/configs/vim/vim_config/#sample-vimrc","title":"Sample .vimrc","text":".vimrc<pre><code># --- Base Configs ---\nsyntax on\nset mouse=a\nnnoremap &lt;LeftMouse&gt; &lt;LeftMouse&gt;a\n\nset cursorline\nset cursorcolumn\n\n# --- Themeing ---\ncoloscheme slate\n\n# --- Plugins ---\ncall plug#begin()\n\nPlug 'scrooloose/nerdtree'\n\ncall plug#end()\n</code></pre> <p>```</p>"},{"location":"personal/school/COMM_204/midterm_1/","title":"Midterm 1 - CPSC 204","text":""},{"location":"personal/school/COMM_204/midterm_1/#midterm-overview","title":"Midterm Overview","text":""},{"location":"personal/school/COMM_204/midterm_1/#single-server-process","title":"Single Server Process","text":"<pre><code>flowchart LR\n    input --&gt; buffer\n    subgraph process\n    buffer --&gt; server\n    end \n    server --&gt; fin</code></pre>"},{"location":"personal/school/COMM_204/midterm_1/#assumptions","title":"Assumptions","text":"<ul> <li>FIFO queue</li> <li>process is stable: all inputs are processed with no waste<ul> <li>\\(\\lambda &lt; \\mu\\) or \\(\\rho &lt; 1\\) (utilization &lt; 100%)</li> <li>why can't the assumption be \\(=\\)?</li> </ul> </li> <li>units arrive independently of one another</li> <li>no limit on queue length</li> </ul>"},{"location":"personal/school/COMM_204/midterm_1/#randomness","title":"Randomness","text":"<ul> <li>\\(A_i\\): Inter-arrival time, how long before the next person comes. It tells you the difference between you and the next person.<ul> <li>If you show up at 2:00PM and the next person at 5:00PM, then \\(A\\) would be 3 hours.</li> </ul> </li> <li>\\(S_i\\): Service time, how long does the person need to get through the server?</li> </ul>"},{"location":"personal/school/COMM_204/midterm_1/#variables","title":"Variables","text":"<ul> <li>\\(\\lambda\\): average arrival/input rate (units/time)<ul> <li>\\(\\dfrac{1}{\\lambda}\\): average customer inter-arrival rate</li> </ul> </li> <li>\\(\\mu\\): average capacity rate of the server (units/time)<ul> <li>\\(\\dfrac{1}{\\mu}\\): average processing time</li> </ul> </li> <li>\\(\\rho = \\dfrac{\\lambda}{\\mu}\\): server utilization</li> <li>\\(T = T_q + T_s\\): average flow time<ul> <li>\\(T_q\\): average waiting time (time in queue)</li> <li>\\(T_s\\): average processing time (by server)</li> </ul> </li> <li>\\(I = I_q + I_s\\): inventory in process<ul> <li>\\(I_q\\): number of people in line</li> <li>\\(I_s\\): number of people being processed</li> </ul> </li> </ul>"},{"location":"personal/school/COMM_204/midterm_1/#formulas","title":"Formulas","text":"<ul> <li>\\(I = \\lambda T\\), \\(I_q = \\lambda T_q\\), \\(I_s = \\lambda T_s\\)</li> <li>\\(T_s = \\dfrac{1}{\\mu}\\)</li> <li>\\(I_s = \\dfrac{\\lambda}{\\mu}\\)</li> </ul>"},{"location":"personal/school/COMM_204/midterm_1/#queue","title":"Queue","text":"<p>What might impact \\(I_q\\)?</p> <ul> <li>\\(\\mu\\) since fast service can move the queue faster</li> <li>\\(\\lambda\\) since more people coming in can increase the line</li> </ul>"},{"location":"personal/school/COMM_204/midterm_1/#pk-formula1","title":"PK Formula1","text":"\\[I_q \\cong \\dfrac{\\rho^2}{1 - \\rho} \\cdot \\dfrac{C^2_{A}+C^2_{S}}{2}\\] <p>where </p> <ul> <li>\\(C_A\\): coefficient of variation of inter-arrival time</li> <li>\\(C_S\\): coefficient of variation of service time</li> </ul> <p>where \\(CV = \\dfrac{Standard Deviation}{Mean}\\) which can be written as \\(CV = \\dfrac{\\sigma[X]}{E[X]}\\)</p> <p>NOTE: if exponontially distributed, we have \\(\\sigma[X] = E[X]\\)</p>"},{"location":"personal/school/COMM_204/midterm_1/#modified-formula","title":"Modified Formula","text":"\\[I_q \\cong \\dfrac{\\lambda^2}{\\mu(\\mu - \\lambda)} \\cdot \\dfrac{C^2_{A}+C^2_{S}}{2}\\] <p>where \\(\\dfrac{C^2_{A}+C^2_{S}}{2}\\) is the variance</p>"},{"location":"personal/school/COMM_204/midterm_1/#pk-shortcuts","title":"PK Shortcuts","text":""},{"location":"personal/school/COMM_204/midterm_1/#gg1-queue","title":"G/G/1 queue","text":"\\[ I_q \\cong \\dfrac{\\rho^2}{1 - \\rho} \\cdot \\dfrac{C^2_{A}+C^2_{S}}{2} \\] <ul> <li>G: arrivals follow a general distribution</li> <li>G: service times follow a general distribution</li> <li>1: there is a single processor (server)</li> </ul>"},{"location":"personal/school/COMM_204/midterm_1/#mm1-queue","title":"M/M/1 queue","text":"<p>If we assume that \\(C_A\\) and \\(C_S\\) are for exponential distributions then</p> <p>\\(\\sigma[X] = E[X]\\) and \\(C_A = C_S = 1\\)</p> \\[ I_q \\cong \\dfrac{\\rho^2}{1 - \\rho} \\] <ul> <li>M2: arrivals follow a exponential distribution</li> <li>M2: service times follow a exponential distribution</li> <li>1: there is a single processor (server)</li> </ul>"},{"location":"personal/school/COMM_204/midterm_1/#md1-queue","title":"M/D/1 queue","text":"<ul> <li>M2: arrivals follow a exponential distribution</li> <li>M2: service time is deterministic (standard deviation: \\(\\sigma[X] = 0\\))</li> <li>1: there is a single processor (server)</li> </ul> <p>Where \\(C_A = 1\\) and \\(C_S = 0\\)</p> \\[ I_q \\cong \\dfrac{\\rho^2}{1 - \\rho} \\cdot \\dfrac{1}{2} \\] <ol> <li> <p>\\(\\cong\\) means congruence. In most cases it's an equation, but in special cases, there are numbers that make the formula messy. The full equation is more complex.\u00a0\u21a9</p> </li> <li> <p>M is short for Markovian, or exponentially distributed\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"personal/school/CPSC_404/midterm_1/","title":"Midterm 1","text":""},{"location":"personal/school/CPSC_404/midterm_1/#disk-storage","title":"Disk &amp; Storage","text":""},{"location":"personal/school/CPSC_404/midterm_1/#disk-geometry","title":"Disk Geometry","text":"Examples <p>Question: Here</p> <p></p>"},{"location":"personal/school/CPSC_404/midterm_1/#access-time","title":"Access Time","text":"<p>The time needed to read or write a page is made up of seeking, rotating, and transferring</p>"},{"location":"personal/school/CPSC_404/midterm_1/#seek-time","title":"Seek Time","text":"\\[ \\begin{align}     T_{seekMin} &amp; = T_{setup} \\\\     T_{seekMax} &amp; = T_{setup} + (T_{trackSweep} \\cdot  n_{totalTracks}) \\\\     T_{seekAvg} &amp; = T_{setup} + (T_{trackSweep} \\cdot n_{avgTracks}) \\end{align} \\]"},{"location":"personal/school/CPSC_404/midterm_1/#rotation-time","title":"Rotation Time","text":"\\[ \\begin{align}     T_{rotateMin} &amp; = 0 \\\\     T_{rotateMax} &amp; = T_{rotateOneTrack} \\\\     T_{rotateAvg} &amp; = \\dfrac{T_{rotateMax}}{2} \\end{align} \\]"},{"location":"personal/school/CPSC_404/midterm_1/#transfer-time","title":"Transfer Time","text":"\\[ \\begin{align}     T_{transfer} &amp; = T_{rotateOneTrack} \\cdot \\dfrac{n_{sectorsInPage}}{n_{sectorsInTrack}} \\end{align} \\]"},{"location":"personal/school/CPSC_404/midterm_1/#prefetching","title":"Prefetching","text":"<p>You can reduce the number of random reads and writes by doing that action on a set of sequential data. In this case, you only incur the random access penalty once. </p>"},{"location":"personal/school/CPSC_404/midterm_1/#random-access","title":"Random Access","text":"<p>You need to incur the random access penalty for each of the pages.</p> \\[     T_{randomAccess} = (T_{seek} + T_{rotate} + T_{transfer}) \\cdot n_{pages} \\]"},{"location":"personal/school/CPSC_404/midterm_1/#sequential-access","title":"Sequential Access","text":"<p>You incur the penalty only when you first search for a set of data, then all following pages can just be found with \\(T_{transfer}\\).</p> \\[     T_{seqAccess} = (T_{seek} + T_{rotate}) + (T_{transfer} \\cdot n_{pages}) \\]"},{"location":"personal/school/CPSC_404/midterm_1/#external-sorting","title":"External Sorting","text":"Examples <ol> <li>You have 500 pages of RAM used to sort a file with 25 000 pages. <ol> <li>How many SSLs would be produced from the sort phase if you use cylindrification?  <ul> <li>let \\(m\\) be the number of times that the data file can fit in RAM</li> <li>\\(m = \\dfrac{25000}{500} = 50\\)</li> <li>\\(\\therefore\\) You would have 50 SSLs </li> </ul> </li> <li>Assume we do a 10-way merge, how would you allocate space for input and output buffers to minimize I/Os?<ul> <li>You have space (500 pages) for 10 sets of input buffers and 1 output buffer</li> <li>In total you have access to 11 buffers. We want to distribute space evenly to input and output.</li> <li>let \\(n_i\\) be the number of buffers in a single set of input buffers</li> <li>\\(n_i = \\lfloor500 buffers / 11 sets\\rfloor\\) = 45</li> <li>\\(\\therefore\\) You have 10 input with 45 each and 1 output with 45 + leftover (50) buffers. </li> </ul> </li> </ol> </li> </ol> <p>Why do we need sorting?</p> <ul> <li>needed for bulk loading of B+Trees</li> <li>eliminating duplicates</li> <li>useful for aggregate operations like <code>GROUP BY</code></li> <li>useful for efficient <code>JOINS</code> of relations</li> </ul> <p>Guiding principle</p> <p>Random page accesses are very expensive and should be minimized in favour of sequential accesses</p> <p>How do we put that principle into practice?</p> <ul> <li>we operate on data in clusters so that we create more opportunities for sequential access</li> <li>store those sequential data blocks in memory </li> </ul>"},{"location":"personal/school/CPSC_404/midterm_1/#sort-phase","title":"Sort Phase","text":"<p>The first step of external sorting is sorting sections of data into <code>sorted sublists (SSLs)</code>. </p> <p>Let \\(B\\) be the size of RAM Let \\(m\\) be the number of times a data file can be divided into \\(B\\) sections \\(\\therefore S_{data} = m \\cdot B\\)</p> <ol> <li>read \\(B\\) pages of data into memory. Maximize the amount of data written into memory by using the entirety of RAM</li> <li>the result is \\(m\\) SSLs that are each locally sorted</li> </ol>"},{"location":"personal/school/CPSC_404/midterm_1/#merge-phase","title":"Merge Phase","text":"<p>Once you have your locally sorted SSLs, you now have to merge them back onto disk in sorted order. </p> <p>The most efficient way to merge large datasets is with a \\(k\\)-way merge. Where \\(k\\) is \\(B - 1\\). </p> <p>You allocate \\(B - 1\\) buffers in RAM for each sorted sublist and 1 buffer for the output. </p>"},{"location":"personal/school/CPSC_404/midterm_1/#external-sorting-optimizations","title":"External Sorting Optimizations","text":"<ul> <li><code>cylindrification</code>: placing blocks on the same cylinder to reduce seek and rotational latency</li> <li><code>prefetching</code>: reading more data in than necessary in order to cache it for future use</li> <li><code>double buffering</code>: allocating another set of input/output buffers so that the CPU isn't idle when reading or writing data into RAM</li> </ul>"},{"location":"personal/school/CPSC_404/midterm_1/#btrees","title":"B+Trees","text":"<p>A B+Tree is an indexing method, a way to quickly retrieve data records from a data file. </p> <p>The idea:</p> <ul> <li>store an index file that will reference data from the actual data file</li> <li>traverse the index file instead of iterating through all the data</li> </ul>"},{"location":"personal/school/CPSC_404/midterm_1/#data-entries","title":"Data Entries","text":"<p>The individual records of a database can be stored in three ways:</p> <ol> <li>\\(alt1\\): direct access to the data record with the key value \\(k\\)</li> <li>\\(alt2\\): a key value \\(k\\) and a single pointer that points to the corresponding data record \\(k^*\\)</li> <li> <p>\\(alt3\\): a key value \\(k\\) and a list of pointers that point to the corresponding data records</p> </li> <li> <p>what happens if you use \\(alt2\\) or \\(alt3\\) for a primary key?</p> </li> <li>\\(alt2\\) and \\(alt3\\) would essentially return the same result since there is only one value associated with \\(k\\)</li> <li>what happens if you use \\(alt2\\) with a secondary key?</li> <li>you would get multiple data entries that all have the same key</li> </ol>"},{"location":"personal/school/CPSC_404/midterm_1/#hashing","title":"Hashing","text":"<p>Hashing is the second indexing method</p>"},{"location":"personal/school/CPSC_404/midterm_1/#dynamic-hashing","title":"Dynamic Hashing","text":""},{"location":"personal/school/CPSC_404/midterm_1/#extensible-hashing","title":"Extensible Hashing","text":""},{"location":"personal/school/CPSC_404/midterm_1/#linear-hashing","title":"Linear Hashing","text":""},{"location":"personal/school/CPSC_404/midterm_1/#query-optimization","title":"Query Optimization","text":""},{"location":"personal/school/CPSC_404/query_evaluation/","title":"Query Evaluation","text":""},{"location":"personal/school/CPSC_404/query_evaluation/#density-of-indexes","title":"Density of Indexes","text":"<ul> <li> <p>indexing process</p> <ul> <li>choose a key to build an index on (department is not primary key -&gt; sparse index)</li> <li>write the index entries as you iterate through all the data</li> <li>because of the way data is arranged, you will get your index entries in non sorted order</li> </ul> </li> <li> <p>sparse index gets created when you index on a secondary key</p> </li> <li> <p>dense index gets created when you index on a primary key</p> </li> <li> <p>we can't sort the underlying data, but we can sort the data</p> </li> <li> <p>sparse: index entry per page of records</p> </li> <li>dense index: index entry for every distinct occurrance of a value of indexed attribute in a record</li> </ul>"},{"location":"personal/school/CPSC_404/query_evaluation/#query-evaluation","title":"Query Evaluation","text":"<ul> <li>a query can be evaluated by a number of different strategies called plans, all creating the same result</li> <li> <p>when we assess the IO of a plan, we look at reading and writing IO for intermediate results, but never the final result</p> </li> <li> <p>three operators for evaluation</p> </li> <li>index probing:<ul> <li>use an index to find tuples that match a selection condition, you chase the pointers until you get your result</li> </ul> </li> <li>iteration:<ol> <li>table scan: exhaustively read everything in a file</li> <li>index scan: using the index file, it does not follow the pointers at all. You do an operation on the key of a data entry, not on the underlying data. </li> </ol> </li> <li>partitioning:</li> </ul> <p>Example</p> <p>Given Table <code>songs(sid, sname, genre, year)</code> with 500 pages and </p> <pre><code>SELECT * FROM songs\nWHERE genre = 'hiphop' AND year &gt; 2010\n</code></pre> \\[     \\sigma_{genre}(songs) \\]"},{"location":"personal/school/CPSC_404/query_evaluation/#analysis-of-evaluation","title":"Analysis of Evaluation","text":""},{"location":"personal/school/CPSC_404/query_evaluation/#table-scan","title":"Table Scan","text":"<p>Given a basic table scan, you will have 500 pages and therefore 500 IOs</p>"},{"location":"personal/school/CPSC_404/query_evaluation/#index-scan","title":"Index Scan","text":"<ul> <li>only makes sense for \\(alt2\\) and \\(alt3\\), if \\(alt1\\), you are basically running a table scan</li> <li>a sparse \\(alt2\\) index is not useful because not all key values are reflected in the index, you need a dense index</li> </ul> <p>Example</p> <p>Given table <code>ratings(uid, sid, time, rating)</code> and query <pre><code>SELECT sid FROM ratings WHERE uid = 123 AND time &gt; 2019\n</code></pre></p>"},{"location":"personal/school/CPSC_404/query_evaluation/#index-probe","title":"Index Probe","text":"<ul> <li>cost is ~1.5 I/Os for getting to the DE, +1 I/O if the DE is \\(alt2\\)</li> </ul> <p>What would be the cost if the index was a B+tree?</p>"},{"location":"personal/school/CPSC_404/query_evaluation/#terminology","title":"Terminology","text":"<ul> <li>conjunctive (AND) conditions are vastly more ocommon </li> <li>when you use disjunctive conditions, table scans be the most effective</li> <li>when you have a long conjunctive condition, each indvidual expression is called an atomic conjuctive condition</li> <li>when does an index match a selection condition \\(C\\)? (Hash or B+Tree)</li> <li> <p>hash index: for each search key attribute \\(A\\), \\(C\\) has a conjunct of the form \\(A = v\\)</p> <ul> <li> </li> </ul> </li> <li> <p>B+tree: for some prefix of search key, for every attribute \\(A\\) in the prefix, \\(C\\) has a conjunct of the form \\(A\\) op \\(v\\) where op is <code>=, &gt;, &lt;, &lt;=, &gt;=</code></p> <ul> <li> </li> </ul> </li> </ul>"},{"location":"personal/school/CPSC_404/query_evaluation/#examples","title":"Examples","text":"invalid<pre><code>SELECT * FROM ratings\nWHERE year = 2020\n</code></pre> <p>invalid<pre><code>SELECT * FROM ratings\nWHERE uid &gt;= 2010 AND year = 2020\n</code></pre> In this example, a table read could be better. You only need to random I/O once and then read the rest of the data sequentially. Following pointers would incurr random accesses everytime you go to another pointer.</p> valid<pre><code>SELECT * FROM ratings\nWHERE uid = 123 AND sid = 455\n</code></pre> valid (partial)<pre><code>SELECT * FROM ratings\nWHERE uid = 123 AND sid = 455 AND time &gt;= 2020\n</code></pre>"},{"location":"personal/school/CPSC_404/query_evaluation/#examples_1","title":"Examples","text":"<p>Assume the B+tree is sorted on (uid, sid, time) valid<pre><code>SELECT * FROM ratings\nWHERE uid &gt;= 123 AND sid = 455\n</code></pre></p> <p>valid (partial)<pre><code>SELECT * FROM ratings\nWHERE uid &gt;= 123 AND time &lt;= 2022\n</code></pre> In this case, time doesn't match, but we can load the records into RAM and manage the rest of the query there. </p>"},{"location":"personal/school/CPSC_404/query_evaluation/#questions","title":"Questions","text":"<p>Should you build indexes (given you know your workload) such that you never need to touch the data table?</p> <ul> <li>depends on your storage and use case requirements (you may need to involve multiple tables)</li> <li>when we do updates on the underlying data, you will need to factor in overhead to update the indexes</li> </ul>"},{"location":"personal/school/CPSC_404/query_evaluation/#need-to-review","title":"Need to Review","text":"<ul> <li>what is an index scan</li> </ul>"},{"location":"personal/school/CPSC_418/erl_shell/","title":"Erlang Shell","text":"<p>This a collection of tips and tricks for myself to manipulate the Erlang shell and make it easier to use. </p>"},{"location":"personal/school/CPSC_418/erl_shell/#setup","title":"Setup","text":""},{"location":"personal/school/CPSC_418/erl_shell/#installation","title":"Installation","text":"<p>Refer to official erlang docs </p>"},{"location":"personal/school/CPSC_418/erl_shell/#erlang-shell-configuration","title":"Erlang Shell Configuration","text":"<p>The <code>erl</code> shell by default does not save history of commands entered. To enable this feature, add the following line to your shell profile</p> <pre><code>export ERL_AFLAGS=\"-kernel shell_history enabled\"\n</code></pre>"},{"location":"personal/school/CPSC_418/erl_shell/#compiling-and-running-code","title":"Compiling and Running Code","text":"<p>Erlang is written in modules that you can import into the <code>erl</code> shell. When you first initialize <code>erl</code>, your base directory is whichever folder you called the command on. To navigate to the location of your desired <code>.erl</code> file, use:</p> <pre><code>Eshell\n&gt; cd(\"path/to/erl/file\").\n</code></pre> <p>Then to import the module into the erl shell, run:</p> <pre><code>Eshell\n&gt; c(\"file.erl\").\n</code></pre>"},{"location":"personal/school/CPSC_418/erl_shell/#compiling-with-debugger","title":"Compiling with debugger","text":"<p>To ensure the debugger turns on when running, compile using:</p> <pre><code>Eshell\n&gt; c(\"file.erl\", [debug_info]).\n&gt; debug.start().\n</code></pre>"},{"location":"personal/school/CPSC_418/erl_shell/#other-tips","title":"Other tips","text":"<p>In functional programming you cannot reassign variables once values are set. You can do this in the erlang shell:</p> <pre><code>Eshell\n&gt; X = 10.\n&gt; f(X). % reset X so that you can bind a different value\n</code></pre>"},{"location":"personal/school/CPSC_418/erlang/","title":"Erlang","text":"<p>This section is a little reminder to me about the conventions and best practices to use when coding in Erlang. I'm currently taking senior level university course on parallel programming and have a love-hate relationship with this functional language. (Mostly love).</p>"},{"location":"personal/school/CPSC_418/erlang/#conventions","title":"Conventions","text":""},{"location":"personal/school/CPSC_418/erlang/#variables","title":"Variables","text":"<ul> <li>Function names: <ul> <li><code>lower_case()</code></li> </ul> </li> <li>Variables:  <ul> <li><code>Capitalized</code> for parameters</li> <li><code>_Underscored</code> for unused</li> <li><code>[Hd | Tl]</code> for arrays</li> </ul> </li> </ul>"},{"location":"personal/school/CPSC_418/erlang/#pattern-matching","title":"Pattern Matching","text":"<ul> <li><code>_</code> matches all</li> </ul>"},{"location":"personal/school/CPSC_418/erlang/#conditionals","title":"Conditionals","text":"<p>When controlling code flow, most languages use <code>if</code> and <code>switch</code> statements</p>"},{"location":"personal/school/CPSC_418/erlang/#guard-statements","title":"Guard Statements","text":"<p>The most basic form of boolean statements are known as guard expressions</p> <pre><code>% Guard examples\nEshell\n&gt; is_number(24). % true\n&gt; true\n&gt; is_list(1). % false\n&gt; false\n&gt; X = 10.\n&gt; 10\n&gt; X =:= 13.\n&gt; false\n</code></pre>"},{"location":"personal/school/CPSC_418/erlang/#if-statements","title":"If Statements","text":"<p><code>if</code> statements can control code flow based on the output of guard expressions</p> <pre><code>func(X) -&gt;\nif is_number(X) -&gt;\nnumber;\nX &gt; 120 -&gt;\ngreater\ntrue -&gt;\nfinish\nend.\n</code></pre> <p>If there are no valid expressions, <code>if</code> will throw an error. You can prevent this by adding <code>true</code> to act like an <code>else</code> block.</p>"},{"location":"personal/school/CPSC_418/erlang/#case-of-statements","title":"Case Of Statements","text":"<p>If you would rather control code flow by pattern matching, use <code>case of</code> statements intead</p> <pre><code>func(X) -&gt;\ncase X of\n12 -&gt; number\n_ when is_list(X) -&gt; list\nend.\n</code></pre>"},{"location":"personal/school/CPSC_418/erlang/#functions","title":"Functions","text":"<p>You can define functions in erlang using the following syntax:</p> <pre><code>sum(X, Y) -&gt; X + Y\n</code></pre> <p>Function names can be overloaded, but not function signatures.  <pre><code>sum(X) -&gt; X + 1.\nsum(X, Y) -&gt; X + Y.\n</code></pre></p>"},{"location":"personal/school/CPSC_418/erlang/#higher-order-functions","title":"Higher Order Functions","text":""},{"location":"personal/school/CPSC_418/erlang/#fold-left","title":"Fold-Left","text":"<pre><code>% foldl takes three parameters: function, initial accumulator value, list to fold over\nsum_array(List) -&gt; lists:foldl(\nfun (X, Acc) -&gt;\nX + Acc\nend, 0, List).\n</code></pre>"},{"location":"personal/school/CPSC_418/parallelism/","title":"Parallelism","text":"<p>This page is more for my own reference when taking CPSC 418: Parallel Computing. The library used is based off of ones already implemented by my school. I'm just writing down some of the conventions and templates needed for common parallel algorithms. </p>"},{"location":"personal/school/CPSC_418/parallelism/#reduce","title":"Reduce","text":"<p>Relevant functions</p> <pre><code>wtree:reduce(Workertree, LeafFunction, CombineFunction)\n\n% Setting up for parallel operations\nwtree:create(N_Workers)\nwtree:get(ProcessState, Key)\nworkers:update(Workertree, atomKey, SplitData)\nmisc:cut(Data_List, Workertree) % SplitData\n</code></pre>"},{"location":"personal/school/CPSC_418/parallelism/#examples","title":"Examples","text":"Parallel Add<pre><code>add(Workertree, Key) where is_atom(Key) -&gt; wtree:reduce(Workertree, fun (ProcState) -&gt; add_leaf_function(ProcState, Key),\nfun (Left, Right) -&gt; add_combine_function(Left, Right).\n).\n\nadd_leaf_function(ProcState, Key) -&gt;\nlists:sum(wtree:get(ProcState, Key)).\n\nadd_combine_function(Left, Right) -&gt;\nLeft + Right.\n\ntest_add(N_Workers, List) -&gt; Workertree = wtree:create(N_Workers), workers:update(Workertree, data, misc:cut(List, Workertree)), add(Workertree, data).\n</code></pre>"},{"location":"personal/school/CPSC_418/reduce/","title":"Breakdown of Reduce","text":"<p>Breakdown of my class's library to implement reduce in Erland</p>"},{"location":"personal/school/CPSC_418/reduce/#create","title":"Create","text":"<pre><code>% Call create/3 to spawn N_Leaves child processes\ncreate(N_Leaves) when is_integer(N_Leaves), N_Leaves &gt; 0 -&gt;\ncreate(N_Leaves, 0, none).\n\n% Create N_Leaves child processes\n%   Each worker gets a dictionary with already defined keys\ncreate(N_leaves, BaseIndex, ParentPid) -&gt;\nspawn(fun() -&gt;\nChildren = create_kids(N_leaves, BaseIndex, ParentPid),\nworker([\n{parent, ParentPid},\n{index, BaseIndex},\n{n_leaves, N_leaves},\n{children_td, Children},\n{children_bu, lists:reverse(Children)}\n])\nend).\n\n% If there is only one child, don't create any new children\ncreate_kids(1, _, _) -&gt;\n[];\n\n% If there are multiple children, return a list of \"child\" processes\ncreate_kids(N_leaves, Index, ParentPid) -&gt;\n{N_left, N_right} = split(N_leaves),\n[\ncreate(N_right, Index + N_left, self())\n| create_kids(N_left, Index, ParentPid)\n].\n</code></pre>"},{"location":"projects/RustQLite/00_overview/","title":"RustQLite Overview","text":""},{"location":"projects/RustQLite/00_overview/#background","title":"Background","text":"<p>I stumbled upon this cool repository on Github that contains a ton of resources for building common tools in a step by step fashion. I've personally been interested in Database Management Systems and have wondered how they work behind the scenes.</p> <p>The following project is a mock implementation of a database, but using rust instead of C. </p>"},{"location":"projects/RustQLite/00_overview/#project-thoughts","title":"Project Thoughts","text":"<p>This project is my first committed foray in using rust as a programming language. I realized that this method of following a tutorial in a different language is a fantastic way to learn. I found myself comparing and contrasting different elements of C and rust, while also being able to fall back on the structure that the tutorial provided. For any developer who is looking to expand their repertoire of languages, I highly recommend learning in this fashion. </p> <p>Rust provided quite a few unique challenges that forced me to approach problems in a different way. I didn't have free access to points like in C and had to pick up rust's 'ownership' model. </p>"},{"location":"projects/RustQLite/01_repl/","title":"Part 1: REPL","text":""},{"location":"projects/RustQLite/01_repl/#overview","title":"Overview","text":"<p>The first step in implementing a database is to set up the user interface (read-eval-print-loop or REPL) that allows a user to interact with the underlying database once it's built. Using a simple while loop and some IO commands, this part sets up a simple while loop CLI that waits for user input and completes an action based on a given input. </p>"},{"location":"projects/RustQLite/01_repl/#challenges","title":"Challenges","text":"<p>For this first part, the core logic being implemented was mostly a while loop and some IO features. The REPL just needed to complete the following actions: </p> <ol> <li>await user input when run</li> <li>read and process user input</li> <li>output some result or text back to user</li> </ol> <p>There wasn't much complexity in this step other than figuring out rust's IO libraries. In C you have the <code>string.h</code> library that handles a lot of the string manipulation and <code>stdio.h</code> for managing IO. </p>"},{"location":"projects/RustQLite/01_repl/#finished-code","title":"Finished Code","text":"RustC <pre><code>use std::{io::{self, Write}, process};\n\nfn main() {\nprintln!(\"Hello, world!\");\nloop {\nprint_prompt();\nio::stdout().flush().unwrap();\n\nlet mut input = String::new();\n\nio::stdin()\n.read_line(&amp;mut input)\n.expect(\"Failed to read line.\");\n\nif input.trim() == \".exit\" {\nprintln!(\"Exiting from process...\");\nprocess::exit(0x0100);\n} else {\nprintln!(\"{}\", input);\n}\n}\n}\n\nfn print_prompt() {\nprint!(\"db &gt; \");\n}\n</code></pre> Taken from 'Build Your Own Database in C'<pre><code>#include &lt;stdbool.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\ntypedef struct {\nchar* buffer;\nsize_t buffer_length;\nssize_t input_length;\n} InputBuffer;\n\nInputBuffer* new_input_buffer() {\nInputBuffer* input_buffer = malloc(sizeof(InputBuffer));\ninput_buffer-&gt;buffer = NULL;\ninput_buffer-&gt;buffer_length = 0;\ninput_buffer-&gt;input_length = 0;\n\nreturn input_buffer;\n}\n\nvoid print_prompt() { printf(\"db &gt; \"); }\n\nvoid read_input(InputBuffer* input_buffer) {\nssize_t bytes_read =\ngetline(&amp;(input_buffer-&gt;buffer), &amp;(input_buffer-&gt;buffer_length), stdin);\n\nif (bytes_read &lt;= 0) {\nprintf(\"Error reading input\\n\");\nexit(EXIT_FAILURE);\n}\n\n// Ignore trailing newline\ninput_buffer-&gt;input_length = bytes_read - 1;\ninput_buffer-&gt;buffer[bytes_read - 1] = 0;\n}\n\nvoid close_input_buffer(InputBuffer* input_buffer) {\nfree(input_buffer-&gt;buffer);\nfree(input_buffer);\n}\n\nint main(int argc, char* argv[]) {\nInputBuffer* input_buffer = new_input_buffer();\nwhile (true) {\nprint_prompt();\nread_input(input_buffer);\n\nif (strcmp(input_buffer-&gt;buffer, \".exit\") == 0) {\nclose_input_buffer(input_buffer);\nexit(EXIT_SUCCESS);\n} else {\nprintf(\"Unrecognized command '%s'.\\n\", input_buffer-&gt;buffer);\n}\n}\n}\n</code></pre>"},{"location":"projects/RustQLite/01_repl/#notable-differences","title":"Notable Differences","text":"<p>I'm pretty sure I ended up using some more high level libraries since a lot of the input and I/O management was handled by rust's <code>std::io</code> library. </p>"},{"location":"projects/schedulii/dependency-injection/","title":"Dependency Injection","text":"<p>As we scaled up the features of our application and started dividing more chunks of the project in distinct sections, our previous DI approach became clunky. In order to get dependencies to the componenets that actually needed them, we would have to drill down layers of function parameters. </p> <p>Example: Let's say we want to instantiate a database connection pool for our project, we want to be able to </p> <ol> <li>send the connection to functions that access our database</li> <li>reuse the connection across the project</li> <li>only have one connection for the project</li> </ol> <p>What transpired in our code was the instantiation of a single <code>Env</code> struct that contained our database connection.  <pre><code>type Env struct {\nDB *pgxpool.Pool\n}\n</code></pre> We then proceeded to pass the <code>Env</code> struct through our application to wherever it needed to be. main.go<pre><code>// We instantiate an env struct that contains a DB connection, \n// then pass the env to wherever the code needs it\nfunc main() {\nenv := &amp;models.Env{DB: setupDatabaseConnection()}\nginEngine := setUpEngine(env)\n...\n}\n\nfunc setUpEngine(env *models.Env) *gin.Engine {\nr := gin.Default()\nstore := cookie.NewStore([]byte(\"secret\"))\nr.Use(sessions.Sessions(\"schedulii\", store))\nr.Use(gin.Logger())\nr.Use(middleware.CORSMiddleware)\nrouter.SetupRoutes(r, env)\nreturn r\n}\n</code></pre></p> routes.go<pre><code>func SetupRoutes(engine *gin.Engine, env *models.Env) {\n...\n\nengine.GET(\"/readUser\", database.ReadUserHandler(env))\nengine.GET(\"/readGroup\", database.ReadGroupHandler(env))\n}\n</code></pre> handler.go<pre><code>func ReadEventHandler(env *models.Env) gin.HandlerFunc {\n...\n\nevent, err = data_srv.ReadEvent(env, event)\nif err != nil {\nc.JSON(http.StatusBadRequest, gin.H{\"read error\": err.Error()})\nreturn\n}\nc.JSON(200, event)\nreturn gin.HandlerFunc(fn)\n}\n</code></pre> service.go<pre><code>func ReadEvent(env *models.Env, event data_model.Event) (data_model.Event, error) {\n// NOTE: (1)\nquery := \"SELECT * FROM Events WHERE eventid = ($1)\"\nqueryResult := env.DB.QueryRow(\ncontext.Background(),\nquery,\nevent.EventId,\n)\n\n...\n}\n</code></pre> <ol> <li>Technically a 'service' should not include any database access logic. At the time of writing this, I hadn't yet implemented 'repositories' yet so we kept all logic and retrieval in the service. </li> </ol> <p>To remedy this, we had to look for a different way to handle dependency injection without our application. We ended up looking towards <code>wire</code>, a DI tool developed by Google. By writing <code>providers</code> and using <code>injectors</code>, we could decompose our application and also organize dependencies to the components that needed them. </p>"},{"location":"projects/schedulii/dependency-injection/#wire-exemplar","title":"Wire Exemplar","text":"<p>We first have to create <code>provider</code> functions that allow wire to create instances of structs for us to use. Here is an example of a <code>provider</code> from one of our services. </p> service.go<pre><code>type EventService struct {\ndb *pgxpool.Pool }\n\nfunc NewEventService(db *pgxpool.Pool) EventService {\nreturn EventService{\ndb: db,\n}\n}\n</code></pre> <p>We can then let wire know about our <code>providers</code> so that it can generate our DI code. </p> wire.go<pre><code>//+build wireinject\n\npackage main\n\nimport ...\n\nvar AppSet = wire.NewSet(\n// setting up database connection\ndb.NewDatabaseConnection,\n\n// setting up gin.engine for our web server\ngin.Default, // setting up service and handler for our events data\ndata_srv.NewEventService,\ndata_handler.NewEventHandler,\n\n// setting up our router for our app\nroutes.NewRouter,\n\n// creating the app and combining everything\nNewScheduliiApp, )\n\n// entrypoint to the injected app\nfunc InitializeApp() (ScheduliiApp, error) {\nwire.Build(AppSet)\nreturn ScheduliiApp{}, nil\n}\n</code></pre> <p>When we run <code>wire</code> on our go project, it generates this new file called <code>wire_gen.go</code>. We can then reference the newly created <code>InitializeApp()</code> function in our <code>main()</code> function to get a <code>ScheduliiApp</code> with all our required dependencies. </p> wire_gen.go<pre><code>package main\n\nimport ...\n\nfunc InitializeApp() (ScheduliiApp, error) {\npool, err := db.NewDatabaseConnection()\nif err != nil {\nreturn ScheduliiApp{}, err\n}\nengine := gin.Default()\nuserService := data_srv.NewUserService(pool)\nuserHandler := data_handler.NewUserHandler(userService)\neventService := data_srv.NewEventService(pool)\neventHandler := data_handler.NewEventHandler(eventService)\ngroupService := data_srv.NewGroupService(pool)\ngroupHandler := data_handler.NewGroupHandler(groupService)\nrouter := routes.NewRouter(engine, userHandler, eventHandler, groupHandler)\nscheduliiApp := NewScheduliiApp(pool, engine, router)\nreturn scheduliiApp, nil\n}\n</code></pre>"},{"location":"projects/schedulii/dependency-injection/#resources","title":"Resources","text":"<ul> <li>Dependency Injection in Go</li> </ul>"}]}